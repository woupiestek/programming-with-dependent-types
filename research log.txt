research log programming-with-dependent-types


*** 1/1/16 ***
Ik wil dit project afsluiten.

Adrej's REPL kan op commando
 - variabelen een type of een waarde geven
 - een overzicht geven van de huidge context
 - typechecken en evalueren op verzoek
 
Defunctionalization: leg functies op een heap en doe berekeningen op hun pointers.
Nu heb je geen hogere order functies meer, maar slechts pointer arithmetic met gewone functies.

Veel hiervan gaat vanzelf binnen scala: we maken een lamba-object met een apply methode en klaar is kees.

*** 19/12/15 ***
Type-checker -> booleanwaardige functie van expressies 

Twee vragen: deze expressie heeft dit type, deze expressie heeft een type

*** 4/12/15 ***
Modulaire interpreters met monad transformaties

Het idee is werkelijk zeer eenvoudig: maak van je interpreter een monade. 
Begin met een simpele taal en een simple interpreter
Gebruik monad transformers om de taal en zijn interpretaties uit te breiden.


Hoe is een interpreter een monade dan?

Het uitgangspunt is dat er een hoofdtype is van de output.
Een interpreter produceert daarnaast bijvoorbeeld logs.

Mijn gedachte: alle zichtbare output is een side effect. Neem
REPL: read evaluate print loop
read en print zijn sowieso side effects
een geheugen is een andere side effect
error messages zijn side effects

Het resultaat van evaluatie zouden we kunnen uitzonderen van de side effects, 
Maar syntax en type checks die hier deel van uitmaken lijken weer monades.

Overigens lijken monade transformers vaak een omkering te veroorzaken:
Wat het binnenste side effect lijkt, wordt de buitenste monade.


-> het interpreter pattern geeft elke term een methode interpret met een context argument.
-> free monads zijn een manier om aan data types voor abstract syntax trees. Ik geloof dat ik dit al geprobeerd heb, maar dacht dat case classes hetzelfde
probleem beter oploste.
-> Monades zijn nog weleens op operads gebaseerd. Dat geldt bijvoorbeeld ook voor state monads wiens transitiefuncties een soort operad vormen
   Operads kunnen echter ook parallelle side-effects netjes combineren.
   Deze presentatie maakt het wellicht eenvoudiger om monades te combineren.
   
-> Andere combinaties zijn mogelijke met distributieve wetten. Ik geloof dat het grootste probleem echter is om 


De interpreter lijkt een endomorfisme van een top level datatype; je geeft de interpreter een string of een abstract syntax tree
en er komt een nieuw element van hetzelfde type uit. Maar er zijn dus side effects, met name geheugen, praten met de gebruiker, etc.

REPL voor interactie met de gebruiker. Met print:String -> REPL(Unit) en read: REPL(String)
Loop is een bijzonder geval... (X->REPL(Bool*X))->REPL(X)
Herhaal een actie totdat een conditie is berijkt.



-> zichtbaarheid: kunnen monadetransfrmatie bij elkaars methodes? misschien is dat niet nodig...

 



*** 2/12/15 ***

-> finite state machines met eindige monoides. In plaats van naar de fase ruimte zelf te kijken,
kijken we naar de transitiefuncties.

beter nog misschien: 
* het alphabet is een verzameling generatoren van een eindige monoide
dwz: de elementen van de monoide zijn equivalentieklassen van rijtjes uit het alphabet.

Het alphabet lijkt op een kostenmodel, waar de koste van elke staat gelijk is aan het kleinst aantal nodige letters

We hebben een verzamelingen van herschrijfregels of vergelijkingen, en daaronder dient de geaccepteerde verzameling van strings gesloten te zijn.
Dit gaat echter wel twee kanten op...

Het voordeel: geen beginstaat meer nodig.
De eindstaten zijn een willekeurige deelverzameling, geen idealen ofzo.

Zowel het alphabet als de eindstaten zijn willekeurige deelverzamelingen.

-> finite monad
een eindige functor is een functor die bedenkt kan worden met een disjuncte vereniging van functoren van de vorm
X |-> X^T
veel monades vallen buiten deze boot.

Een deelverzameling word vervangen door iets wat gesloten is onder 'map' en een functie door een natuurlijke transformatie
Maar wat heb je dan?

*** 22/11/15 ***
Een calculus met eliminatieregels aan de rechter- en de linkerkant is veel natuurlijker
en rekent ook nog makkelijker.

*** 18/11/15 ***
Met sequenten in rechtsintroductieregels in gedachten, een varient van de lambda calculus met assignments:

variabelen: x,y,z ...
abstracties: \x.M
???: x , y := z (weakening, constraction)
assignments: x:=M;N
applications: x@=M;N

In normaalvormen worden alleen variabelen ge-assigned en dienen assignements dus alleen om contractie geldig 
te maken.

x:=M;x > M
x:=M;y > y
x:=M;\x.N>\x.N
x:=M;\y.N>\y.x:=???;N 
x:=M;


x,y,z := w (weakening & contractie)


*** 7/11/15 ***
De Bruijns notatie suggesteert voor producten: 
  A -> ... -> t(n)
Geen Pi, maar gewone pijlen.


-> heen en weer vertalen
in de REPL gebruiken we een taal met gewonen variablen die verwijzen naar de context
achter de schermen mag het er compleet anders uitzien.
met name het gebruik van (super)combinatoren lijkt me interessant...

aangepaste typen voor S en K:
(A -> B(0) -> C(0,1)) -> (A -> B(0)) -> A -> C(2(0)(1(0)),0)
(A -> B(0) -> A)


*** 6/11/15 ***

- taal uitbreiden voor repl, en mogelijk verder vereenvoudigen...



*** 9/10/15 ***
Misschien beter dan Andrej's versie:
http://www.andres-loeh.de/LambdaPi/LambdaPi.pdf

Het schrijven van de parser was weer lastig.

Het lijken mij inverse operaties: parsen en serializen. Klopt niet helemaal, omdat
serialize(parse(string)) bijvoorbeeld witruimte weglaat.
parse(serialize(tree)) kan de identiteit zijn. Nu hebben we echter het probleem dat niet elke
string de serializatie van een boom is.



repl: read evaluate print loop
-> het is gebruikelijk om de taal uit te breiden met extra instructies voor de repl
want anders kun je er erg weinig mee.

-> in eerste instantie mogen we het echter wel letterlijk nemen...

asynchrone eval lijkt me aardig.
daarnaast een manier om de loop te doorbreken.
voor de rest letterlijk repl lijkt me goed.


*** 28/8/15 ***
- lexer -- parser -- etc.
Laat ik wel een aparte 'lexer' bouwen die bijvoorbeeld een boom van expressies bouwt door naar haakjes te kijken

Kwestie van loose coupling, tight integration.

Tree ::= Leaf(s:String) | Fork(List[Tree]) 

Dan voor de rest: sommige aanpassingen aan het domein model kunnen geen kwaad lijkt me.

- Andrej heeft een REPL toegevoegd. Ook interessant om een keer te doen.
- Daar is o.a. een pretty printer nodig.

Ik ben niet gelukkig met de opsplitsing in de lexer en de parser die ik nu heb.
Parboil heeft een hoop foutmeldingen ingebouwd, die ik nu mis in de cruciale stap.
Misschien dat Parboiled met eigen input formaten kan leven.
Kennelijk gaat er iets fout tijdens lexen, wat tijdens parsen geen problemen meer oplevert.


--- problemen ---
We maken de termen generiek zodat een willekeurig type kan dienen als type van variabelesymbolen
Gevolg: een elegantere manier om met abstracties om te gaan: we breiden het type van symbolen
met een extra element uit. Deze nieuwe types stoppen we in abstracties.


Nadeel: bij het afleiden van typen zit het wel een beetje in de weg.
Een context bestaat uit dependent types. De dependencies zijn variabelen.
Dus elk element van een context heeft een ander type in Scala...




*** 14/8/15 ***

Parboiled is een andere parserbibliotheek voor scala. Die met bepaalde voordelen hebben.

- het plan voor vandaag is om zonder eclipse een werkende parser te bouwen.
 - sbt continue testen laten draaien
 - testen toevoegen voor het bouwen van eenvoudige expressies
 - vervolgens net zo lang worstelen met de standaard parser bibliotheek tot hij werkt.

Hoewel deze manier van werken uiteindelijk resultaat opleverde
Hebben de vage foutmeldingen me danig gefrustreerd.
Ik heb geen flauw benul waarom ze zijn verdwenen.


Scala Parser Combinators -> CFG's 
Parboiled -> PEG's
Menhir -> LR(1)
yacc -> LALR(1)


- Ik denk dat het de moeite waard is dit nog eens te herhalen met parboiled

http://www.decodified.com/parboiled/api/scala/#package
 

*** 4/8/15 ***
https://poundblog.wordpress.com/2013/06/06/a-scala-parser-combinator-grammar-for-csv/

Kijk naar Antlr voor parsers--antlr heeft hoger performance, lagere integratie met scala.


*** 2/8/15 ***

Expression ::= Terminal | Application | Abstraction | Product | Cut
Terminal ::= Universe | Variable
Variable ::= Named | "#"Variable
Application ::= "(" Expression* ")"
Universe ::= "(U" number ")"
Abstraction ::= "(\" (Variable*) "Expression)"
Product ::= "(Pi" "Abstraction)"
Cut ::= (let x Expression Expression)
Named ::= String


verbeteringen:

Expression ::= Terminal | "("~Compound~")"
Simple ::= Variable | Universe 
Compound ::= Abstraction | Application | Product | Cut

*** 31/7/15 ***
Vermijd problemen met type checking door apparte statische en dynamische equivalentierelaties te definieren. 
Dus in plaats van te controleren dat twee type functies extentieel gelijk zijn, controleer je of de definities voldoende op elkaar lijken.



variable capture: [x=N](\y.M) -> \y.[x=#y.N](M) -> blokeer y rechtstreeks

volgende substitutie: [y=P](\y. [x= [#y=y]N] M) -> we kijken nu verder.

Dit is hetzelfde. Voeg gewoon een let binding aan de taal toe.


cut(x,M,\y:T.N) -> \y:cut(x,M,T).cut(x,y=#y.M,N) 
cut(x,M,y=N.P) -> y=cut(x,M,N).cut(x,y=#y.M,P)

Ik werk met het voorbeeld van:
http://math.andrej.com/2012/11/08/how-to-implement-dependent-type-theory-i/
Daar staan ook voorbeelden van de rest

Infor over parsers schrijven
http://henkelmann.eu/2011/01/13/an_introduction_to_scala_parser_combinators



*** 1/7/15 ***
Depedent types in Scala: class A{ class B }, hier hebben we dan een klasse die afhankelijk is van een object.
In java kan dit ook.

De syntax is voor vectoren van lengte n.

Nadeel: je kunt niet zomaar nieuwe dependent types definieren -- dat kan hooguit door betaande typen te extenden.



------

foreach A->type T. E(x,y)->T(x)->T(y)



*** 19/6/15 ***

De tweede taal die ik wil uitproberen is Idris. Deze is bovenop Haskell
geïmplementeerd. 

De tutorial is weereens door een linuxautist geschreven.

--- terwijl mysys aan het downloaden/installeren is ---
par en threading. misschien een raar verband, maar geeft een functie
meerdere return types: A | B | C

binnen de functie moet elke return een keer worden aangeroepen: 
return[0] a;.... return[1] b;.... return[2] c;....

na het aanroepen van de functie moeten meerdere continuaties gedefinieerd zijn:
y = f(x);
?(y){...}//eerste continuation, y heeft type A
?(y){...}//tweede continuation, y heeft type B
//laatste continuation, die de andere volgt

Elke heeft toegang tot slecht één variabele.
Evaluatie gaat parallel.

Als een klasse zo wordt gedefinieerd, dan heeft hij 
verschillende interfaces voor verschillende threads
--- en nu verder ---

Kunnen we hier iets interessants mee doen?

Sudoku solver bijvoorbeeld.

Mijn laaste idee was een backtracking algoritme dat 
een lijst van constraints afstreept terwijl het een
sudokubord invult. De implementatie in clojure lukte
niet wegens fouten die ik niet kon achterhalen.

Kan ik het typesysteem van Idris voor mijn wagen spannen?

Zou het mogelijk zijn om de constraints in het datatype te stoppen?




*** 5/6/15 ***
Laten we om beginnen eens kijken wat de talen op wikipeda beloven.

Promises and warnings:

Adga - Haskell-like syntax, Emacs interface, gebaseerd op UTT-
UTT 

pattern matching in plaats van recursie...


*** Korte beschrijving van mogelijk interessante talen ***
Applied Type System (ATS) - performance comparable to C and C++
compiler prevents division by zero, memory corruption. ML-like syntax.

Coq - interactive theorem prover. Tactic automatiseren het bewijswerk 
voor een deel. The syntax is weerzinwekkend, weet ik uit ervaring.

Idris - Haskell-like syntax. tries to be both a proof assistent and a
 practicle programming language.
 
Matita - Coq-like experimental interactive theorem prover

NuPrl - ML-like logic based tools to support programming and implementing
 formal computational mathematics.
 Theories as systems...

F* - based on F#, also system F-omega. OCaml and non light F# syntax. Program verification
 in mind.

Prototype Verification System - specification and automated theorem proving

Sage - hybrid type checking, wat een verdeling tussen static en 
 dynamic type checking betekent.
  
Twelf - een logic programming variant, met beperkte praktische capaciteiten

*** Idee ***
Gebruik dependent types of unittests te integreren in het type systeem.
Dat is het niet precies: unit tests garanderen normaal gesproken geen
type-lidmaatschap.

Authorizatie toepassingen: typen kunnen afhangen van gebruikersrechten.

Vooralsnog zie ik separation, en monades. Maar de monades kun je ook
opvatten als autorisaties.

Platform afhankelijke datatypen--dat lijkt me een serieuze toepassing.

Uiteraard zou het beter zijn als complier errors al tijdens het 
programmeren zichtbaar worden. Real time static type checking dus

Ik begin met F* -- ATS volgende?

De tutorial gaat meteen richting theorie. Niet zo leuk dus.


--- via via kom ik terecht op 
Gegeneralizeerde algebraische datatypen (GADTs)
Wat ik zie staan lijkt op de inductive defintie van een type-functie 


