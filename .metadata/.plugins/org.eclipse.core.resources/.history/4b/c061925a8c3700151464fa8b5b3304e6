package nl.woupiestek.andrej

import scala.util.Try
import scala.util.Success
import scala.util.Failure

/**
 * @author Wouter
 */
object Evaluate {

  def apply(expression: Expression): Try[Expression] = {
    expression match {
      case Application(t, u) => apply2(t, u)
      case Cut(v, t, u) => {
        for (t2 <- apply(t); u2 <- apply(u); w <- apply(cut(v, t2, u2))) yield w
      }
      case x => Success(x)
    }
  }

  private def apply2(t: Expression, u: Expression) = {
    (for (t2 <- apply(t); u2 <- apply(u)) yield t2 match {
      case Abstraction(v, d, t3) => apply(cut(v, u2, t3))
      case _                     => Success(Application(t2, u2))
    }).flatten
  }

  private def cut(variable: Variable, left: Expression, right: Expression): Expression = {
    right match {
      case `variable`        => left
      case Application(t, u) => Application(cut(variable, left, t), cut(variable, left, u))
      case Abstraction(v, d, t) => {
        if (v == variable) right
        else Abstraction(v, cut(variable, left, d), cut(variable, Cut(v, Masked(v), left), t))
      }
      case Cut(v, l, r) => {
        if (v == variable) right
        else Cut(v, cut(variable, left, l), cut(variable, Cut(v, Masked(v), left), r))
      }
      case x => x
    }
  }

  private case class Masked(variable: Variable) extends Variable {
    val prettyPrint = "#" + variable.prettyPrint
  }

}