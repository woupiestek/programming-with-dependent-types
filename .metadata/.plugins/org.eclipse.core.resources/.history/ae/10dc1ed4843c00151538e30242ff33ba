package nl.woupiestek.andrej

import util.parsing.combinator._
import nl.woupiestek.andrej._

/**
 * @author Wouter
 */
object Parse extends RegexParsers {
  def expression: Parser[Expression] = terminal | application | abstraction | product | cut

  def terminal: Parser[Terminal] = universe | variable

  def variable: Parser[Variable] = new Regex("^[a-zA-Z]+$") ^^ { Variable(_) }

  def universe: Parser[Universe] = new Regex("Type\\d") ^^ { Universe(_) }

  def application: Parser[List[Expression]] = "(" ~ (new Regex("\\s+") ~ expression).+ ~ new Regex("\\s*)") ^^ { List(_) }

  def abstraction: Parser[Abstraction] = "(\\" ~ variable ~ "." ~ expression ~ ")" ^^ { Abstraction(_) }

  def product: Parser[Product] = "Product ".~(abstraction) ^^ { Product(_) }

  def cut: Parser[Cut] = "(Let " ~ variable ~ " be " ~ expression ~ ". " ~ expression ~ ")" ^^ { Cut(_) }

  def apply(input: String): Expression = parseAll(expression, input) match {
    case Success(result, _) => result
    case failure: NoSuccess => scala.sys.error(failure.msg)
  }
}