package nl.woupiestek.andrej

import util.parsing.combinator._
//import nl.woupiestek.andrej._

/**
 * @author Wouter
 */
object Parse extends RegexParsers {
  def expression: Parser[Any] = terminal | application | abstraction | product | cut

  def terminal: Parser[Any] = universe | variable

  def variable: Parser[String] = """[a-zA-Z_]\w*""".r

  def universe: Parser[String] = new Regex("^Type\\d$")

  def application: Parser[Any] = "(" ~> repsep(expression, " ") <~ ")"

  def abstraction: Parser[Any] = "(\\" ~> variable <~ "." ~> expression <~ ")"

  def product: Parser[Any] = "Product" ~> abstraction

  def cut: Parser[Any] = "(Let " ~> variable <~ " be " ~> expression <~ ". " ~> expression <~ ")"

  def apply(input: String) = parseAll(expression, input)
}