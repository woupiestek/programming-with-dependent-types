package nl.woupiestek.andrej

import scala.util.Try
import scala.util.Success
import scala.util.Failure

/**
 * @author Wouter
 */
object Evaluate {

  def apply(expression: Expression): Try[Expression] = {
    expression match {
      case Application(t, u) => {
        for (t2 <- apply(t); u2 <- apply(u)) yield {
          t2 match {
            case Abstraction(v, d, t3) => cut(v, u2, t3)
            case _                     => Application(t2, u2)
          }
        }
      }
      case Cut(v, t, u) => {
        for (t2 <- apply(t); u2 <- apply(u); w <- apply(cut(v, t2, u2))) yield w
      }
      case x => Success(x)
    }
  }

  private def cut(variable: Variable, left: Expression, right: Expression): Expression = {
    right match {
      case `variable`        => left
      case Application(t, u) => Application(cut(variable, left, t), cut(variable, left, u))

      case x                 => x
    }
  }

}